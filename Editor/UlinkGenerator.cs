#nullable enable
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Ulink.Runtime;
using UnityEditor;
using UnityEngine.UIElements;

namespace Ulink.Editor
{
    [InitializeOnLoad]
    public static class UlinkGenerator
    {
        private const string GenerateFolder = "Generated/Controller";
        private const string AssetsPath = "Assets";

        static UlinkGenerator()
        {
            EditorApplication.delayCall += GenerateControllers;
        }

        [MenuItem("Tools/Leo's Tools/Ulink/Generate Controllers")]
        public static void GenerateControllers()
        {
            GenerateControllers(UlinkSettings.instance.TargetFolder);
        }

        public static void GenerateControllers(string targetFolder)
        {
            var uxmlElementTypes = new HashSet<Type>(
                TypeCache.GetTypesWithAttribute<UxmlElementAttribute>());

            var controllerTypes = TypeCache.GetTypesWithAttribute<UlinkAttribute>()
                .Where(type => type.IsClass
                    && !type.IsAbstract
                    && typeof(VisualElement).IsAssignableFrom(type)
                    && uxmlElementTypes.Contains(type))
                .GroupBy(type => type.FullName)
                .Select(group => group.First())
                .ToList();

            foreach (var type in controllerTypes)
            {
                string namespaceName = type.Namespace ?? string.Empty;
                string className = type.Name;

                var scriptAssetPath = FindScriptAssetPath(type);
                if (string.IsNullOrEmpty(scriptAssetPath))
                {
                    continue;
                }

                string rootPath = GetAssemblyRoot(scriptAssetPath!);
                string generatedPath = Path.Combine(rootPath, GenerateFolder);

                if (!Directory.Exists(generatedPath))
                    Directory.CreateDirectory(generatedPath);

                string filePath = Path.Combine(generatedPath, $"{className}.g.cs");

                if (File.Exists(filePath))
                {
                    continue;
                }

                string content = GenerateClass(className, namespaceName);
                File.WriteAllText(filePath, content);
            }

            AssetDatabase.Refresh();
        }

        private static string? FindScriptAssetPath(Type type)
        {
            var monoScripts = MonoImporter.GetAllRuntimeMonoScripts();
            foreach (var script in monoScripts)
            {
                if (script.GetClass() == type)
                {
                    return AssetDatabase.GetAssetPath(script);
                }
            }

            return null;
        }

        private static string GenerateClass(string className, string? namespaceName)
        {
            return $@"// Auto-generated by Ulink. Do not modify this file.
#nullable enable
using System;
using Ulink.Runtime;
using UnityEngine;
using UnityEngine.UIElements;

{(string.IsNullOrEmpty(namespaceName) ? string.Empty : $"namespace {namespaceName}\n{{")}
    public partial class {className} 
    {{
        private IUIController? _controller;

        private ControllerType _controllerType;

        [UxmlAttribute]
        private ControllerType ControllerType
        {{
            get => _controllerType;
            set
            {{
                if (value.Type == null)
                {{
                    _controller = null;
                    _controllerType = ControllerType.Empty;
                    return;
                }}

                 try
                {{
                    _controllerType = value;
                    _controller = Activator.CreateInstance(_controllerType.Type!) as IUIController;
                    _controller?.Initialize(this);
                }}
                catch (Exception e)
                {{
                    _controller = null;
                    _controllerType = ControllerType.Empty;
                    Debug.LogWarning($"Failed to initialize Ulink Controller: {e}");
                }}
            }}
        }}
    }}
{(string.IsNullOrEmpty(namespaceName) ? string.Empty : "}")}
";
        }

        /// <summary>
        /// Finds the root for the generated files
        /// </summary>
        /// <param name="scriptPath"></param>
        /// <returns></returns>
        private static string GetAssemblyRoot(string scriptPath)
        {
            string? directory = Path.GetDirectoryName(scriptPath);
            while (!string.IsNullOrEmpty(directory) && directory != AssetsPath)
            {
                if (Directory.GetFiles(directory, "*.asmdef").Length > 0)
                {
                    return directory;
                }

                directory = Path.GetDirectoryName(directory);
            }

            return AssetsPath;
        }
    }
}
